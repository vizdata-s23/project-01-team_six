{
  "hash": "07cfc05abd00842033b36738b0ddf684",
  "result": {
    "markdown": "---\ntitle: \"Personal Project 1\"\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in system(\"timedatectl\", intern = TRUE): running command 'timedatectl'\nhad status 1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.1 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.3.0      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npoll <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-31/poll.csv') \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 500 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): company, industry\ndbl (6): 2022_rank, 2022_rq, change, year, rank, rq\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nreputation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-31/reputation.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 700 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): company, industry, name\ndbl (2): score, rank\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nreputation1 <- reputation %>%\n  group_by(industry, name) %>%\n  mutate(avg_score = mean(score))\nreputation2 <- reputation1 %>%\n  group_by(name) %>%\n  mutate(maxavg = max(avg_score))\nreputation3 <- reputation1 %>%\n  group_by(name) %>%\n  slice(which.max(avg_score))\n\ncitizenship <- reputation2 %>%\n  group_by(name) %>%\n  filter(name == \"CITIZENSHIP\" & avg_score == maxavg)\nculture <- reputation2 %>%\n  group_by(name) %>%\n  filter(name == \"CULTURE\" & avg_score == maxavg)\nethics <- reputation2 %>%\n  group_by(name) %>%\n  filter(name == \"ETHICS\" & avg_score == maxavg)\ngrowth <- reputation2 %>%\n  group_by(name) %>%\n  filter(name == \"GROWTH\" & avg_score == maxavg)\nps <- reputation2 %>%\n  group_by(name) %>%\n  filter(name == \"P&S\" & avg_score == maxavg)\ntrust <- reputation2 %>%\n  group_by(name) %>%\n  filter(name == \"TRUST\" & avg_score == maxavg)\nvision <- reputation2 %>%\n  group_by(name) %>%\n  filter(name == \"VISION\" & avg_score == maxavg)\n\nfinal <- rbind(citizenship, culture, ethics, growth, ps, trust, vision)\n\nget_box_stats <- function(y, upper_limit = max(final$score) * 1.15) {\n  return(data.frame(\n    y = 0.95 * upper_limit,\n    label = paste(\n      \"Mean =\", round(mean(y), 2), \"\\n\",\n      \"Med =\", round(median(y), 2), \"\\n\"\n    )\n  ))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(final, aes(x = name, y = score, fill = industry)) +\n  geom_boxplot(fatten = 0.8) +\n  labs(title = \"Highest Rated Industries In Each Attribute Category\", x = \"Company Attribute\", y = \"Score\", fill = \"Industry\") +\n  scale_fill_manual(values = c(\"#4ea5e3\", \"#ce0e5b\", \"#1aaf82\")) +\n  stat_summary(fun.data = get_box_stats, geom = \"text\", hjust = 0.5, vjust = 0.9, size = 2.6) +\n  theme_minimal() \n```\n\n::: {.cell-output-display}\n![](florence_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "florence_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}